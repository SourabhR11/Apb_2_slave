$date
	Wed Apr 30 09:52:54 2025
$end
$version
	QuestaSim Version 10.6c
$end
$timescale
	1ns
$end

$scope module uvm_root $end
$upscope $end

$scope module apb_top $end
$upscope $end

$scope begin uvm_pkg $end
$var parameter 32 ! UVM_HDL_MAX_WIDTH $end
$var parameter 32 " UVM_STREAMBITS $end
$var parameter 32 # UVM_RADIX $end
$var parameter 32 $ UVM_MACRO_NUMFLAGS $end
$var parameter 32 % UVM_DEFAULT $end
$var parameter 32 & UVM_ALL_ON $end
$var parameter 32 ' UVM_FLAGS_ON $end
$var parameter 32 ( UVM_FLAGS_OFF $end
$var parameter 32 ) UVM_COPY $end
$var parameter 32 * UVM_NOCOPY $end
$var parameter 32 + UVM_COMPARE $end
$var parameter 32 , UVM_NOCOMPARE $end
$var parameter 32 - UVM_PRINT $end
$var parameter 32 . UVM_NOPRINT $end
$var parameter 32 / UVM_RECORD $end
$var parameter 32 0 UVM_NORECORD $end
$var parameter 32 1 UVM_PACK $end
$var parameter 32 2 UVM_NOPACK $end
$var parameter 32 3 UVM_PHYSICAL $end
$var parameter 32 4 UVM_ABSTRACT $end
$var parameter 32 5 UVM_READONLY $end
$var parameter 32 6 UVM_NODEFPRINT $end
$var parameter 32 7 UVM_MACRO_EXTRAS $end
$var parameter 32 8 UVM_FLAGS $end
$var parameter 32 9 UVM_UNPACK $end
$var parameter 32 : UVM_CHECK_FIELDS $end
$var parameter 32 ; UVM_END_DATA_EXTRA $end
$var parameter 32 < UVM_START_FUNCS $end
$var parameter 32 = UVM_SET $end
$var parameter 32 > UVM_SETINT $end
$var parameter 32 ? UVM_SETOBJ $end
$var parameter 32 @ UVM_SETSTR $end
$var parameter 32 A UVM_END_FUNCS $end
$var parameter 32 B UVM_STR_CRC_POLYNOMIAL $end
$var parameter 32 C UVM_STDOUT $end
$var parameter 32 D UVM_LINE_WIDTH $end
$var parameter 32 E UVM_NUM_LINES $end
$var parameter 32 F UVM_SMALL_STRING $end
$var parameter 32 G UVM_LARGE_STRING $end
$var reg 1 H uvm_start_uvm_declarations $end
$var integer 32 I uvm_global_random_seed $end
$var integer 32 J UVM_UNBOUNDED_CONNECTIONS $end

$scope function uvm_hdl_check_path $end
$var integer 32 K uvm_hdl_check_path $end
$upscope $end

$scope function uvm_hdl_deposit $end
$var integer 32 L uvm_hdl_deposit $end
$var reg 1024 M value [1023:0] $end
$upscope $end

$scope function uvm_hdl_force $end
$var integer 32 N uvm_hdl_force $end
$var reg 1024 O value [1023:0] $end
$upscope $end

$scope task uvm_hdl_force_time $end
$var reg 1024 P value [1023:0] $end
$var time 64 Q force_time $end
$upscope $end

$scope function uvm_hdl_release_and_read $end
$var integer 32 R uvm_hdl_release_and_read $end
$var reg 1024 S value [1023:0] $end
$upscope $end

$scope function uvm_hdl_release $end
$var integer 32 T uvm_hdl_release $end
$upscope $end

$scope function uvm_hdl_read $end
$var integer 32 U uvm_hdl_read $end
$var reg 1024 V value [1023:0] $end
$upscope $end

$scope function uvm_dpi_get_next_arg_c $end
$upscope $end

$scope function uvm_dpi_get_tool_name_c $end
$upscope $end

$scope function uvm_dpi_get_tool_version_c $end
$upscope $end

$scope function uvm_dpi_get_next_arg $end
$upscope $end

$scope function uvm_dpi_get_tool_name $end
$upscope $end

$scope function uvm_dpi_get_tool_version $end
$upscope $end

$scope function uvm_dpi_regcomp $end
$upscope $end

$scope function uvm_dpi_regexec $end
$var integer 32 W uvm_dpi_regexec $end
$upscope $end

$scope function uvm_dpi_regfree $end
$upscope $end

$scope function uvm_re_match $end
$var integer 32 X uvm_re_match $end
$upscope $end

$scope function uvm_dump_re_cache $end
$upscope $end

$scope function uvm_glob_to_re $end
$upscope $end

$scope function uvm_revision_string $end
$upscope $end

$scope function uvm_radix_to_string $end
$var integer 32 Y radix $end
$upscope $end

$scope function uvm_instance_scope $end
$var reg 8 Z c [7:0] $end
$var integer 32 [ pos $end
$upscope $end

$scope function uvm_oneway_hash $end
$var integer 32 \ uvm_oneway_hash $end
$var integer 32 ] seed $end
$var reg 1 ^ msb $end
$var reg 8 _ current_byte [7:0] $end
$var reg 32 ` crc1 [31:0] $end
$upscope $end

$scope function uvm_create_random_seed $end
$var integer 32 a uvm_create_random_seed $end
$upscope $end

$scope function uvm_object_value_str $end
$upscope $end

$scope function uvm_leaf_scope $end
$var reg 8 b scope_separator [7:0] $end
$var reg 8 c bracket_match [7:0] $end
$var integer 32 d pos $end
$var integer 32 e bmatches $end
$upscope $end

$scope function uvm_vector_to_string $end
$var reg 4096 f value [4095:0] $end
$var integer 32 g size $end
$var integer 32 h radix $end
$upscope $end

$scope function uvm_get_array_index_int $end
$var integer 32 i uvm_get_array_index_int $end
$var reg 1 j is_wildcard $end
$var integer 32 k i $end
$upscope $end

$scope function uvm_get_array_index_string $end
$var reg 1 l is_wildcard $end
$var integer 32 m i $end
$upscope $end

$scope function uvm_is_array $end
$var reg 1 n uvm_is_array $end
$upscope $end

$scope function uvm_has_wildcard $end
$upscope $end

$scope task run_test $end
$upscope $end

$scope function global_stop_request $end
$upscope $end

$scope function set_global_timeout $end
$var time 64 o timeout $end
$var reg 1 p overridable $end
$upscope $end

$scope function set_global_stop_timeout $end
$var time 64 q timeout $end
$upscope $end

$scope function uvm_report_enabled $end
$var reg 1 r uvm_report_enabled $end
$var integer 32 s verbosity $end
$var reg 2 t severity [1:0] $end
$upscope $end

$scope function uvm_report $end
$var reg 2 u severity [1:0] $end
$var integer 32 v verbosity $end
$var integer 32 w line $end
$upscope $end

$scope function uvm_report_info $end
$var integer 32 x verbosity $end
$var integer 32 y line $end
$upscope $end

$scope function uvm_report_warning $end
$var integer 32 z verbosity $end
$var integer 32 { line $end
$upscope $end

$scope function uvm_report_error $end
$var integer 32 | verbosity $end
$var integer 32 } line $end
$upscope $end

$scope function uvm_report_fatal $end
$var integer 32 ~ verbosity $end
$var integer 32 !! line $end
$upscope $end

$scope function uvm_string_to_severity $end
$var reg 1 "! uvm_string_to_severity $end
$var reg 2 #! sev [1:0] $end
$upscope $end

$scope function uvm_string_to_action $end
$upscope $end

$scope function set_config_int $end
$var reg 4096 $! value [4095:0] $end
$upscope $end

$scope function set_config_object $end
$var reg 1 %! clone $end
$upscope $end

$scope function set_config_string $end
$upscope $end

$scope function uvm_is_match $end
$var reg 1 &! uvm_is_match $end
$upscope $end

$scope function uvm_string_to_bits $end
$var reg 115200 '! uvm_string_to_bits [115199:0] $end
$upscope $end

$scope function uvm_bits_to_string $end
$var reg 115200 (! str [115199:0] $end
$upscope $end

$scope task uvm_wait_for_nba_region $end
$var integer 32 )! nba $end
$var integer 32 *! next_nba $end
$upscope $end

$scope function uvm_split_string $end
$upscope $end

$scope function uvm_hdl_concat2string $end
$upscope $end
$upscope $end

$scope begin apb_top_sv_unit $end
$upscope $end

$scope begin std $end
$upscope $end

$scope begin questa_uvm_pkg $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0l
0n
0"!
b0 #!
bx '!
bx (!
bx M
bx O
bx P
bx S
bx V
1H
0^
b1101101 _
b10100011001001010110010011010100 `
b1 f
0j
0p
0r
b0 t
b0 u
bx $!
0%!
0&!
b10000000000 !
b1000000000000 "
b1111000000000000000000000000 #
b10001 $
b10101010101 %
b101010101 &
b101010101 '
b0 (
b1 )
b10 *
b100 +
b1000 ,
b10000 -
b100000 .
b1000000 /
b10000000 0
b100000000 1
b1000000000 2
b10000000000000 3
b100000000000000 4
b1000000000000000 5
b10000000000000000 6
b100000000000000000 7
b100000000000000001 8
b100000000000000010 9
b100000000000000011 :
b100000000000000100 ;
b100000000000000101 <
b100000000000000110 =
b100000000000000110 >
b100000000000000111 ?
b100000000000001000 @
b100000000000001000 A
b100110000010001110110110110 B
b1 C
b1111000 D
b1111000 E
b1110111111 F
b11100000111111111 G
b0 Y
b101110 b
b0 c
b10111 d
b11111111111111111111111111111111 e
b0 m
b0 K
b0 L
b0 N
b0 R
b0 T
b0 U
b1 W
b0 X
b1101001011000001111100000011110 I
b101110 Z
b111 [
b10010100111111001101001001111010 \
b1101001011000001111100000011110 ]
b11111000110111101011000000100010 a
b100000 g
b10000000000000000000000000 h
b0 i
b0 k
b111110100 s
b0 v
b0 w
b11001000 x
b11011001 y
b0 z
b0 {
b0 |
b0 }
b0 ~
b0 !!
b100101 )!
b100101 *!
b11111111111111111111111111111111 J
bx Q
bx o
bx q
$end
#30
b100110 *!
b100111 *!
b100110 )!
b100111 )!
b101000 *!
b101001 *!
b101000 )!
b101001 )!
b11111000110111101011000000110100 a
b11001110100110111101001011010101 a
b110011101000111000010101111111 a
b11100001010001000110110000010100 a
b1101010100101010010101001111101 a
b1111110111001111010100101001001 a
b11101110011001100101110000101101 a
b11010100101010110000110111001110 a
b10011000100111000100101011000 a
b110100011111001101100101011011 a
b11111001111011111000100010001101 a
b111110011101010101111101101 a
b10101010011111100100000110110111 a
b10100111111010100010100001000 a
b100101101011110101000101111000 a
b111110101100011110001010000011 a
b10110010011001101111011010101000 a
b11101100011100011010101101110011 a
b110100000101111010111100000110 a
b10011011010111111100010000010101 a
b11011101000001101111011101111 a
b1001110010000011100000100010100 a
b11100101001001100111001011100100 a
b11000111001010001111010010010010 a
b1010111001000001110110111110100 a
b1001110111100010101111101001100 a
b111111110111000001100001111100 a
b111000011000110011100110101111 a
b11011100000111001000010000111110 a
b11111000110111101011000001000111 a
b11001110100110111101001011101000 a
b110011101000111000010110010010 a
b11100001010001000110110000100111 a
b1101010100101010010101010010000 a
b1111110111001111010100101011100 a
b11101110011001100101110001000000 a
b11010100101010110000110111100001 a
b10011000100111000100101101011 a
b110100011111001101100101101110 a
b11111001111011111000100010100000 a
b111110011101010110000000000 a
b10101010011111100100000111001010 a
b10100111111010100010100011011 a
b100101101011110101000110001011 a
b111110101100011110001010010110 a
b10110010011001101111011010111011 a
b11101100011100011010101110000110 a
b110100000101111010111100011001 a
b10011011010111111100010000101000 a
b11011101000001101111100000010 a
b1001110010000011100000100100111 a
b11100101001001100111001011110111 a
b11000111001010001111010010100101 a
b1010111001000001110111000000111 a
b1001110111100010101111101011111 a
b111111110111000001100010001111 a
b111000011000110011100111000010 a
b11011100000111001000010001010001 a
b11111000110111101011000001011011 a
b11001110100110111101001011111100 a
b110011101000111000010110100110 a
b11100001010001000110110000111011 a
b1101010100101010010101010100100 a
b1111110111001111010100101110000 a
b11101110011001100101110001010100 a
b11010100101010110000110111110101 a
b10011000100111000100101111111 a
b110100011111001101100110000010 a
b11111001111011111000100010110100 a
b111110011101010110000010100 a
b10101010011111100100000111011110 a
b10100111111010100010100101111 a
b100101101011110101000110011111 a
b111110101100011110001010101010 a
b10110010011001101111011011001111 a
b11101100011100011010101110011010 a
b110100000101111010111100101101 a
b10011011010111111100010000111100 a
b11011101000001101111100010110 a
b1001110010000011100000100111011 a
b11100101001001100111001100001011 a
b11000111001010001111010010111001 a
b1010111001000001110111000011011 a
b1001110111100010101111101110011 a
b111111110111000001100010100011 a
b111000011000110011100111010110 a
b11011100000111001000010001100101 a
b11011100000111001000010001111010 a
b111000011000110011100111101011 a
b111111110111000001100010111000 a
b10011011010111111100010001010001 a
b110011101000111000010110111011 a
b11111000110111101011000001110000 a
b11001110100110111101001100010001 a
b1101010100101010010101010111001 a
b11100001010001000110110001010000 a
b110100000101111010111101000010 a
b110100011111001101100110010111 a
b1111110111001111010100110000101 a
b11101110011001100101110001101001 a
b11010100101010110000111000001010 a
b10011000100111000100110010100 a
b11111001111011111000100011001001 a
b111110011101010110000101001 a
b11101100011100011010101110101111 a
b10101010011111100100000111110011 a
b10100111111010100010101000100 a
b100101101011110101000110110100 a
b111110101100011110001010111111 a
b10110010011001101111011011100100 a
b11100101001001100111001100100000 a
b1001110010000011100000101010000 a
b11011101000001101111100101011 a
b1001110111100010101111110001000 a
b11000111001010001111010011001110 a
b1010111001000001110111000110000 a
